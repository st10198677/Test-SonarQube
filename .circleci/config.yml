# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview & https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      # Specify the version you desire here
      # See: https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current

    # Add steps to the job
    # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - say-hello
      version: 2.1

executors:
  node-executor:
    docker:
      - image: circleci/node:14

jobs:
  build:
    executor: node-executor
    steps:
      - checkout  # Pull down your repository code
      - run: npm install  # Install project dependencies
      - run: npm test  # Run your tests
      
  security_scan:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Run Snyk Security Test  # Running Snyk to scan dependencies
          command: |
            npm install -g snyk
            snyk test

workflows:
  version: 2
  test_and_secure:
    jobs:
      - build  # First, build and test the code
      - security_scan:  # Then, scan for vulnerabilities
          requires:
            - build
